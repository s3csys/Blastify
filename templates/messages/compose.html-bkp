{% extends "dashboard.html" %}

{% block content %}
<div class="container-fluid p-0">
    <div class="row mb-2 mb-xl-3">
        <div class="col-auto d-none d-sm-block">
            <h1 class="h3 mb-3"><strong>Compose</strong> Message</h1>
        </div>

        <div class="col-auto ms-auto text-end mt-n1">
            <a href="{{ url_for('message.index') }}" class="btn btn-secondary">
                <i class="align-middle" data-feather="arrow-left"></i> Back to Messages
            </a>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title">New Message</h5>
                </div>
                <div class="card-body">
                    <form id="composeForm" action="{{ url_for('message.send_message') }}" method="POST" enctype="multipart/form-data">
                        <input type="hidden" name="platform" value="whatsapp">
                        <div class="mb-3">
                            <label class="form-label">Recipients</label>
                            <div class="row">
                                <div class="col-md-6">
                                    <select class="form-select" id="recipientType" name="recipient_type">
                                        <option value="individual">Individual Contacts</option>
                                        <option value="group">Contact Group</option>
                                        <option value="custom">Custom Numbers</option>
                                    </select>
                                </div>
                                <div class="col-md-6" id="individualContactsContainer">
                                    <select class="form-select" id="individualContacts" name="individual_contacts[]" multiple data-placeholder="Select contacts">
                                        {% for contact in contacts %}
                                        <option value="{{ contact.id }}">{{ contact.name }} ({{ contact.phone }})</option>
                                        {% endfor %}
                                    </select>
                                    <small class="form-text text-muted mt-1">You can select multiple contacts by holding Ctrl/Cmd while clicking</small>
                                </div>
                                <div class="col-md-6" id="contactGroupContainer" style="display: none;">
                                    <select class="form-select" id="contactGroup" name="contact_group">
                                        {% for group in groups %}
                                        <option value="{{ group.id }}">{{ group.name }} ({{ group.contact_count }} contacts)</option>
                                        {% endfor %}
                                    </select>
                                </div>
                                <div class="col-md-6" id="customNumbersContainer" style="display: none;">
                                    <textarea class="form-control" id="customNumbers" name="custom_numbers" rows="3" placeholder="Enter phone numbers separated by commas or new lines"></textarea>
                                    <small class="form-text text-muted">Format: +1234567890, +0987654321</small>
                                    <div class="mt-2">
                                        <button type="button" class="btn btn-sm btn-outline-secondary" id="validateNumbersBtn">Validate Numbers</button>
                                        <div id="validationResults" class="mt-2" style="display: none;">
                                            <div class="alert alert-info">
                                                <span id="validNumbersCount">0</span> valid numbers found.
                                                <div id="invalidNumbersContainer" style="display: none;">
                                                    <hr>
                                                    <p class="mb-0">Invalid numbers:</p>
                                                    <ul id="invalidNumbersList" class="mb-0"></ul>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Message Template</label>
                            <div class="row">
                                <div class="col-md-6">
                                    <select class="form-select" id="messageTemplate" name="template_id">
                                        <option value="">Select a template or create a new message</option>
                                        {% for template in templates %}
                                        <option value="{{ template.id }}">{{ template.name }}</option>
                                        {% endfor %}
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <button type="button" class="btn btn-outline-primary" id="previewTemplateBtn">
                                        <i class="align-middle" data-feather="eye"></i> Preview Template
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Message</label>
                            <textarea class="form-control" id="messageContent" name="content" rows="5" placeholder="Type your message here..."></textarea>
                            <small class="form-text text-muted">
                                Available variables: {name}, {phone}
                            </small>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Media (Optional)</label>
                            <input type="file" class="form-control" id="messageMedia" name="media" accept="image/jpeg,image/png,application/pdf">
                            <small class="form-text text-muted">
                                Supported formats: JPG, PNG, PDF (max 5MB)
                            </small>
                            <div id="mediaPreviewContainer" style="display: none;">
                                <div id="mediaPreview" class="mt-2"></div>
                                <button type="button" class="btn btn-sm btn-outline-danger mt-2" id="removeMediaBtn">
                                    <i class="fas fa-trash"></i> Remove Media
                                </button>
                            </div>
                        </div>
                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="scheduleMessage" name="schedule_message">
                                <label class="form-check-label" for="scheduleMessage">
                                    Schedule this message for later
                                </label>
                            </div>
                        </div>
                        <div class="mb-3" id="scheduleTimeContainer" style="display: none;">
                            <label class="form-label">Schedule Time</label>
                            <div class="input-group date" id="scheduleTimePicker" data-target-input="nearest">
                                <input type="text" class="form-control datetimepicker-input" id="scheduleTime" name="schedule_time" data-target="#scheduleTimePicker" placeholder="Select date and time">
                                <div class="input-group-append" data-target="#scheduleTimePicker" data-toggle="datetimepicker">
                                    <div class="input-group-text"><i class="far fa-calendar"></i></div>
                                </div>
                            </div>
                            <small class="form-text text-muted">Schedule your message to be sent at a specific time</small>
                        </div>
                        <div class="text-end">
                            <button type="button" class="btn btn-secondary" id="saveAsDraftBtn">Save as Draft</button>
                            <button type="submit" class="btn btn-primary">Send Message</button>
                        </div>
                        <input type="hidden" id="isDraft" name="is_draft" value="0">
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Template Preview Modal -->
    <div class="modal fade" id="templatePreviewModal" tabindex="-1" aria-labelledby="templatePreviewModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="templatePreviewModalLabel">Template Preview</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="templatePreviewContent">
                        <!-- Template preview will be loaded here -->
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="useTemplateBtn">Use This Template</button>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Media preview functionality
        function handleMediaPreview() {
            const mediaInput = document.getElementById('messageMedia');
            const mediaPreviewContainer = document.getElementById('mediaPreviewContainer');
            const mediaPreview = document.getElementById('mediaPreview');
            const removeMediaBtn = document.getElementById('removeMediaBtn');
            
            // Show preview when a file is selected
            mediaInput.addEventListener('change', function() {
                if (this.files && this.files[0]) {
                    const file = this.files[0];
                    const reader = new FileReader();
                    
                    reader.onload = function(e) {
                        mediaPreviewContainer.style.display = 'block';
                        
                        // Clear previous preview
                        mediaPreview.innerHTML = '';
                        
                        if (file.type.match('image.*')) {
                            // Image preview
                            const img = document.createElement('img');
                            img.src = e.target.result;
                            img.className = 'img-fluid';
                            img.style.maxHeight = '200px';
                            mediaPreview.appendChild(img);
                        } else if (file.type === 'application/pdf') {
                            // PDF preview (just show icon and filename)
                            const pdfPreview = document.createElement('div');
                            pdfPreview.innerHTML = `<i class="far fa-file-pdf text-danger fa-2x"></i> ${file.name}`;
                            mediaPreview.appendChild(pdfPreview);
                        }
                    };
                    
                    reader.readAsDataURL(file);
                }
            });
            
            // Remove media button
            removeMediaBtn.addEventListener('click', function() {
                mediaInput.value = '';
                mediaPreviewContainer.style.display = 'none';
                mediaPreview.innerHTML = '';
            });
        }
        
        // Initialize media preview
        handleMediaPreview();
        
        // Check if we're editing a draft message
        {% if draft_message %}
        // Set form values from draft message
        $('#messageContent').val('{{ draft_message.message_text|e }}');
        
        // Set recipient type and show appropriate container
        if ('{{ draft_message.recipient }}'.startsWith('group:')) {
            $('#recipientType').val('group');
            $('#contactGroupContainer').show();
            $('#individualContactsContainer, #customNumbersContainer').hide();
            $('#contactGroup').val('{{ draft_message.recipient }}'.replace('group:', ''));
        } else if ('{{ draft_message.recipient }}'.match(/^\d+$/)) {
            $('#recipientType').val('individual');
            $('#individualContactsContainer').show();
            $('#contactGroupContainer, #customNumbersContainer').hide();
            $('#individualContacts').val('{{ draft_message.recipient }}').trigger('change');
        } else {
            $('#recipientType').val('custom');
            $('#customNumbersContainer').show();
            $('#individualContactsContainer, #contactGroupContainer').hide();
            $('#customNumbers').val('{{ draft_message.recipient }}');
        }
        
        // If there's media, show the preview
        {% if draft_message.media_url %}
        $('#mediaPreview').html('<img src="{{ draft_message.media_url }}" class="img-fluid mt-2" alt="Media Preview">');
        $('#mediaPreviewContainer').show();
        {% endif %}
        {% endif %}
        // Initialize select2 for multiple select
        $('#individualContacts').select2({
            placeholder: 'Select contacts',
            allowClear: true,
            width: '100%'
        });
        
        // Initialize select2 for contact group
        $('#contactGroup').select2({
            placeholder: 'Select a group',
            allowClear: true,
            width: '100%'
        });

        // Toggle recipient containers based on selection
        $('#recipientType').on('change', function() {
            const selectedType = $(this).val();
            
            // Hide all containers first
            $('#individualContactsContainer, #contactGroupContainer, #customNumbersContainer').hide();
            
            // Show the selected container
            if (selectedType === 'individual') {
                $('#individualContactsContainer').show();
            } else if (selectedType === 'group') {
                $('#contactGroupContainer').show();
            } else if (selectedType === 'custom') {
                $('#customNumbersContainer').show();
            }
            
            // Trigger select2 to recalculate its size if needed
            if (selectedType === 'individual') {
                $('#individualContacts').select2('destroy').select2({
                    placeholder: 'Select contacts',
                    allowClear: true,
                    width: '100%'
                });
            } else if (selectedType === 'group') {
                $('#contactGroup').select2('destroy').select2({
                    placeholder: 'Select a group',
                    allowClear: true,
                    width: '100%'
                });
            }
        });
        
        // Trigger the change event to initialize the correct container
        $('#recipientType').trigger('change');

        // Load required libraries for datetime picker in the head section
        if (!$('script[src*="moment.js"]').length) {
            $('<script>').attr({
                src: 'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js'
            }).appendTo('head');
        }
        
        if (!$('link[href*="tempusdominus"]').length) {
            $('<link>').attr({
                rel: 'stylesheet',
                href: 'https://cdnjs.cloudflare.com/ajax/libs/tempusdominus-bootstrap-4/5.39.0/css/tempusdominus-bootstrap-4.min.css'
            }).appendTo('head');
        }
        
        if (!$('script[src*="tempusdominus"]').length) {
            $('<script>').attr({
                src: 'https://cdnjs.cloudflare.com/ajax/libs/tempusdominus-bootstrap-4/5.39.0/js/tempusdominus-bootstrap-4.min.js'
            }).appendTo('head');
        }
        
        // Toggle schedule time container
        $('#scheduleMessage').on('change', function() {
            if ($(this).is(':checked')) {
                $('#scheduleTimeContainer').show();
                
                // Initialize datetime picker with a slight delay to ensure libraries are loaded
                setTimeout(function() {
                    initDatetimePicker();
                }, 500);
            } else {
                $('#scheduleTimeContainer').hide();
                $('#scheduleTime').val('');
            }
        });
        
        // Initialize datetime picker function
        function initDatetimePicker() {
            // Destroy if already initialized to prevent errors
            if ($('#scheduleTimePicker').data('datetimepicker')) {
                $('#scheduleTimePicker').datetimepicker('destroy');
            }
            
            $('#scheduleTimePicker').datetimepicker({
                format: 'YYYY-MM-DD HH:mm',
                minDate: moment().add(5, 'minutes'), // Minimum 5 minutes from now
                stepping: 5, // 5 minute intervals
                sideBySide: true,
                icons: {
                    time: 'far fa-clock',
                    date: 'far fa-calendar',
                    up: 'fas fa-chevron-up',
                    down: 'fas fa-chevron-down',
                    previous: 'fas fa-chevron-left',
                    next: 'fas fa-chevron-right',
                    today: 'fas fa-calendar-check',
                    clear: 'fas fa-trash',
                    close: 'fas fa-times'
                }
            });
        }
        
        // Validate custom phone numbers
        $('#validateNumbersBtn').on('click', function() {
            const numbersText = $('#customNumbers').val().trim();
            if (!numbersText) {
                showAlert('Please enter phone numbers to validate', 'warning');
                return;
            }
            
            // Split by commas or new lines
            const numbers = numbersText.split(/[,\n]+/).map(num => num.trim()).filter(num => num);
            
            // Simple validation regex for international format
            const phoneRegex = /^\+[1-9]\d{1,14}$/;
            
            const validNumbers = [];
            const invalidNumbers = [];
            
            numbers.forEach(number => {
                if (phoneRegex.test(number)) {
                    validNumbers.push(number);
                } else {
                    invalidNumbers.push(number);
                }
            });
            
            // Update validation results
            $('#validNumbersCount').text(validNumbers.length);
            
            // Show invalid numbers if any
            if (invalidNumbers.length > 0) {
                $('#invalidNumbersList').empty();
                invalidNumbers.forEach(number => {
                    const listItem = document.createElement('li');
                    listItem.textContent = number;
                    listItem.className = 'text-danger';
                    
                    // Add a suggestion if possible
                    if (!number.startsWith('+')) {
                        const suggestion = document.createElement('small');
                        suggestion.className = 'text-muted ml-2';
                        suggestion.textContent = ' (Missing + prefix)';
                        listItem.appendChild(suggestion);
                    }
                    
                    $('#invalidNumbersList').append(listItem);
                });
                $('#invalidNumbersContainer').show();
                showAlert('Some phone numbers are invalid. Please correct them before sending.', 'warning');
            } else {
                $('#invalidNumbersContainer').hide();
                showAlert('All phone numbers are valid!', 'success');
            }
            
            // Show validation results
            $('#validationResults').show();
        });
        
        // Save as Draft functionality
        $('#saveAsDraftBtn').on('click', function() {
            // Set the draft flag
            $('#isDraft').val('1');
            
            // Submit the form
            $('#composeForm').submit();
        });

        // Load template content when a template is selected
        $('#messageTemplate').on('change', function() {
            const templateId = $(this).val();
            
            if (templateId) {
                // Fetch the template content via AJAX
                $.ajax({
                    url: "{{ url_for('message.templates_get') }}",
                    type: 'GET',
                    data: { id: templateId },
                    dataType: 'json',
                    success: function(response) {
                        if (response.success) {
                            // Populate the message content
                            $('#messageContent').val(response.template.content);
                            
                            // Handle media if any
                            if (response.template.media_url) {
                                $('#mediaPreview').html(`<img src="${response.template.media_url}" class="img-fluid mt-2" alt="Media Preview">`);
                                $('#mediaPreviewContainer').show();
                            } else {
                                $('#mediaPreviewContainer').hide();
                            }
                            
                            // Show a success message
                            showAlert('Template loaded successfully!', 'success');
                        } else {
                            showAlert('Failed to load template: ' + response.message, 'danger');
                        }
                    },
                    error: function(xhr) {
                        showAlert('Failed to load template: ' + (xhr.responseJSON ? xhr.responseJSON.message : 'Server error'), 'danger');
                    }
                });
            } else {
                // Clear the message content if no template is selected
                $('#messageContent').val('');
                $('#mediaPreviewContainer').hide();
            }
        });

        // Helper function to show alerts
        function showAlert(message, type = 'info') {
            const alertHtml = `
                <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `;
            
            // Create alert container if it doesn't exist
            if ($('#alertContainer').length === 0) {
                $('<div id="alertContainer" class="mt-3"></div>').insertBefore('#composeForm');
            }
            
            // Add alert to container
            $('#alertContainer').append(alertHtml);
            
            // Auto-dismiss after 5 seconds
            setTimeout(function() {
                $('.alert').alert('close');
            }, 5000);
        }
        
        // Preview template button
        $('#previewTemplateBtn').on('click', function() {
            const templateId = $('#messageTemplate').val();
            
            if (templateId) {
                // Fetch the template content via AJAX
                $.ajax({
                    url: "{{ url_for('message.templates_get') }}",
                    type: 'GET',
                    data: { id: templateId },
                    dataType: 'json',
                    success: function(response) {
                        if (response.success) {
                            // Populate the preview modal
                            let previewHtml = '<div class="alert alert-info">This is how your message will look:</div>';
                            previewHtml += '<div class="card"><div class="card-body">' + response.template.content + '</div></div>';
                            
                            // Add media preview if available
                            if (response.template.media_url) {
                                previewHtml += '<div class="mt-3"><strong>Media:</strong><br>';
                                previewHtml += '<img src="' + response.template.media_url + '" class="img-fluid mt-2" alt="Media Preview"></div>';
                            }
                            
                            $('#templatePreviewContent').html(previewHtml);
                            $('#templatePreviewModal').modal('show');
                        } else {
                            showAlert('Failed to load template preview: ' + response.message, 'danger');
                        }
                    },
                    error: function(xhr) {
                        showAlert('Failed to load template preview: ' + (xhr.responseJSON ? xhr.responseJSON.message : 'Server error'), 'danger');
                    }
                });
            } else {
                showAlert('Please select a template first.', 'warning');
            }
        });

        // Use template button
        $('#useTemplateBtn').on('click', function() {
            // The template content is already loaded in the preview modal,
            // so we can just close the modal and use the already selected template
            $('#templatePreviewModal').modal('hide');
            
            // The template content will be loaded by the messageTemplate change event
            // which was already triggered when the user selected the template
            // No need to make another AJAX call here
        });

        // Save as draft button handler
         $('#saveAsDraftBtn').on('click', function() {
             // Set the draft flag
             $('#isDraft').val('1');
             
             // Get form data for minimal validation
             const recipientType = $('#recipientType').val();
             const messageContent = $('#messageContent').val().trim();
             
             // Basic validation for drafts - at least need a message
             if (!messageContent) {
                 showAlert('Please enter a message to save as draft', 'warning');
                 return;
             }
             
             // Submit the form
             $('#composeForm').submit();
         });

         // Form submission
         $('#composeForm').on('submit', function(e) {
             // Prevent default form submission
             e.preventDefault();
             
             // Check if it's a draft
             const isDraft = $('#isDraft').val() === '1';
             
             // If not a draft, validate the form
             if (!isDraft && !validateForm()) {
                 return false;
             }
             
             // Show loading state
             const submitBtn = $('#sendMessageBtn');
             const originalText = submitBtn.html();
             
             if (!isDraft) {
                 submitBtn.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Sending...');
                 submitBtn.prop('disabled', true);
             } else {
                 // If it's a draft, show a different message
                 submitBtn.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving draft...');
                 submitBtn.prop('disabled', true);
             }
             
             // Submit the form using AJAX to provide better feedback
             $.ajax({
                 url: $(this).attr('action'),
                 type: 'POST',
                 data: new FormData(this),
                 processData: false,
                 contentType: false,
                 success: function(response) {
                     if (isDraft) {
                         showAlert('Message saved as draft successfully!', 'success');
                     } else if ($('#scheduleMessage').is(':checked')) {
                         showAlert('Message scheduled successfully!', 'success');
                     } else {
                         showAlert('Message sent successfully!', 'success');
                     }
                     
                     // Redirect to appropriate page after a short delay
                     setTimeout(function() {
                         if (isDraft) {
                             window.location.href = '/messages/drafts';
                         } else if ($('#scheduleMessage').is(':checked')) {
                             window.location.href = '/messages/scheduled';
                         } else {
                             window.location.href = '/messages/history';
                         }
                     }, 1500);
                 },
                 error: function(xhr, status, error) {
                     // Reset button state
                     submitBtn.html(originalText);
                     submitBtn.prop('disabled', false);
                     
                     // Show error message
                     let errorMessage = 'An error occurred while processing your request.';
                     if (xhr.responseJSON && xhr.responseJSON.message) {
                         errorMessage = xhr.responseJSON.message;
                     }
                     showAlert(errorMessage, 'danger');
                 }
             });
         });
        
        // Form validation function
        function validateForm() {
            let isValid = true;
            let errorMessages = [];
            
            // Get recipient type
            const recipientType = $('#recipientType').val();
            
            // Check if recipient is selected based on type
            if (recipientType === 'individual') {
                const selectedContacts = $('#individualContacts').val();
                if (!selectedContacts || selectedContacts.length === 0) {
                    errorMessages.push('Please select at least one contact');
                    isValid = false;
                }
            } else if (recipientType === 'group') {
                if (!$('#contactGroup').val()) {
                    errorMessages.push('Please select a contact group');
                    isValid = false;
                }
            } else if (recipientType === 'custom') {
                const customNumbers = $('#customNumbers').val().trim();
                if (!customNumbers) {
                    errorMessages.push('Please enter at least one phone number');
                    isValid = false;
                } else {
                    // Validate phone numbers format
                    const numbers = customNumbers.split(/[,\n]+/).map(num => num.trim()).filter(num => num);
                    const phoneRegex = /^\+[1-9]\d{1,14}$/;
                    const invalidNumbers = numbers.filter(num => !phoneRegex.test(num));
                    
                    if (invalidNumbers.length > 0) {
                        errorMessages.push('Some phone numbers are invalid. Please validate them before sending.');
                        isValid = false;
                    }
                }
            }
            
            // Check if message content is provided
            if (!$('#messageContent').val().trim()) {
                errorMessages.push('Please enter a message');
                isValid = false;
            }
            
            // Check if schedule time is provided when scheduling is enabled
            if ($('#scheduleMessage').is(':checked') && !$('#scheduleTime').val()) {
                errorMessages.push('Please select a schedule time');
                isValid = false;
            }
            
            // Display error messages if any
            if (!isValid) {
                errorMessages.forEach(message => {
                    showAlert(message, 'danger');
                });
            }
            
            return isValid;
        }
        });
    });
</script>
{% endblock %}